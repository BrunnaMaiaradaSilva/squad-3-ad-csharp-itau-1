// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TryLog.Infraestructure.EF;

namespace TryLog.Infraestructure.Migrations
{
    [DbContext(typeof(TryLogContext))]
    [Migration("20200511144928_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("role");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("roleclaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("userclaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("userlogin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("userrole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("usertoken");
                });

            modelBuilder.Entity("TryLog.Core.Model.Environment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateRegister")
                        .HasColumnName("date_register")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id");

                    b.ToTable("environment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateRegister = new DateTime(2020, 5, 11, 11, 49, 26, 517, DateTimeKind.Local).AddTicks(3731),
                            Deleted = false,
                            Description = "Desenvolvimento"
                        },
                        new
                        {
                            Id = 2,
                            DateRegister = new DateTime(2020, 5, 11, 11, 49, 26, 519, DateTimeKind.Local).AddTicks(8649),
                            Deleted = false,
                            Description = "Homologação"
                        },
                        new
                        {
                            Id = 3,
                            DateRegister = new DateTime(2020, 5, 11, 11, 49, 26, 519, DateTimeKind.Local).AddTicks(8764),
                            Deleted = false,
                            Description = "Produção"
                        });
                });

            modelBuilder.Entity("TryLog.Core.Model.Layer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateRegister")
                        .HasColumnName("date_register")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id");

                    b.ToTable("layer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateRegister = new DateTime(2020, 5, 11, 11, 49, 26, 525, DateTimeKind.Local).AddTicks(902),
                            Deleted = false,
                            Description = "FrontEnd"
                        },
                        new
                        {
                            Id = 2,
                            DateRegister = new DateTime(2020, 5, 11, 11, 49, 26, 525, DateTimeKind.Local).AddTicks(2456),
                            Deleted = false,
                            Description = "Back-End"
                        },
                        new
                        {
                            Id = 3,
                            DateRegister = new DateTime(2020, 5, 11, 11, 49, 26, 525, DateTimeKind.Local).AddTicks(2524),
                            Deleted = false,
                            Description = "Mobile"
                        },
                        new
                        {
                            Id = 4,
                            DateRegister = new DateTime(2020, 5, 11, 11, 49, 26, 525, DateTimeKind.Local).AddTicks(2551),
                            Deleted = false,
                            Description = "Desktop"
                        });
                });

            modelBuilder.Entity("TryLog.Core.Model.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateRegister")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("varchar(500)");

                    b.Property<int>("IdEnvironment")
                        .HasColumnType("int");

                    b.Property<int>("IdLayer")
                        .HasColumnType("int");

                    b.Property<int>("IdSeverity")
                        .HasColumnType("int");

                    b.Property<int>("IdStatus")
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnName("token")
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("IdEnvironment");

                    b.HasIndex("IdLayer");

                    b.HasIndex("IdSeverity");

                    b.HasIndex("IdStatus");

                    b.ToTable("log");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateRegister = new DateTime(2020, 5, 11, 14, 49, 26, 541, DateTimeKind.Utc).AddTicks(7358),
                            Deleted = false,
                            Description = "System.NotSupportedException: The SMTP server does not support authentication. at MailKit.Net.Smtp.SmtpClient.AuthenticateAsync(Encoding encoding, ICredentials credentials, Boolean doAsync, CancellationToken cancellationToken)",
                            IdEnvironment = 1,
                            IdLayer = 2,
                            IdSeverity = 1,
                            IdStatus = 3,
                            Token = "aasfdjg2jhlb1j2n3k12h3kjçh12jkeasdasd"
                        });
                });

            modelBuilder.Entity("TryLog.Core.Model.Severity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateRegister")
                        .HasColumnName("data_register")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id");

                    b.ToTable("severity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateRegister = new DateTime(2020, 5, 11, 11, 49, 26, 545, DateTimeKind.Local).AddTicks(5056),
                            Deleted = false,
                            Description = "Baixo"
                        },
                        new
                        {
                            Id = 2,
                            DateRegister = new DateTime(2020, 5, 11, 11, 49, 26, 545, DateTimeKind.Local).AddTicks(6641),
                            Deleted = false,
                            Description = "Médio"
                        },
                        new
                        {
                            Id = 3,
                            DateRegister = new DateTime(2020, 5, 11, 11, 49, 26, 545, DateTimeKind.Local).AddTicks(6720),
                            Deleted = false,
                            Description = "Alto"
                        });
                });

            modelBuilder.Entity("TryLog.Core.Model.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateRegister")
                        .HasColumnName("date_register")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id");

                    b.ToTable("status");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateRegister = new DateTime(2020, 5, 11, 11, 49, 26, 549, DateTimeKind.Local).AddTicks(7021),
                            Deleted = false,
                            Description = "Arquivado"
                        },
                        new
                        {
                            Id = 2,
                            DateRegister = new DateTime(2020, 5, 11, 11, 49, 26, 549, DateTimeKind.Local).AddTicks(8526),
                            Deleted = false,
                            Description = "Pendente"
                        },
                        new
                        {
                            Id = 3,
                            DateRegister = new DateTime(2020, 5, 11, 11, 49, 26, 549, DateTimeKind.Local).AddTicks(8636),
                            Deleted = false,
                            Description = "Ignorado"
                        });
                });

            modelBuilder.Entity("TryLog.Core.Model.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnName("created_at")
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("user");

                    b.HasData(
                        new
                        {
                            Id = "9bddd32f78",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bd44f745-d36b-4cb6-a9aa-2b052524eaa9",
                            CreatedAt = "2020-05-11 14:49:26.5531193",
                            Deleted = false,
                            Email = "le_andro@emailprovider.com",
                            EmailConfirmed = true,
                            FullName = "Leandro Costa",
                            LockoutEnabled = false,
                            Password = "St2r_as2312%$%",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2020, 5, 11, 14, 49, 26, 553, DateTimeKind.Utc).AddTicks(1193),
                            UserName = "le_andro@emailprovider.com"
                        },
                        new
                        {
                            Id = "d0f753c3cf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e385bd13-b0a3-4ea6-9a7b-24fe775bccdc",
                            CreatedAt = "2020-05-11 14:49:26.5542517",
                            Deleted = false,
                            Email = "marcelasilv@provideremail.com.br",
                            EmailConfirmed = true,
                            FullName = "Marcela Silva",
                            LockoutEnabled = false,
                            Password = "1@#A3Sas9d_3we5@#",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2020, 5, 11, 14, 49, 26, 554, DateTimeKind.Utc).AddTicks(2517),
                            UserName = "marcelasilv@provideremail.com.br"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TryLog.Core.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TryLog.Core.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TryLog.Core.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TryLog.Core.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TryLog.Core.Model.Log", b =>
                {
                    b.HasOne("TryLog.Core.Model.Environment", "Environment")
                        .WithMany("Logs")
                        .HasForeignKey("IdEnvironment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TryLog.Core.Model.Layer", "Layer")
                        .WithMany("Logs")
                        .HasForeignKey("IdLayer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TryLog.Core.Model.Severity", "Severity")
                        .WithMany("Logs")
                        .HasForeignKey("IdSeverity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TryLog.Core.Model.Status", "Status")
                        .WithMany("Logs")
                        .HasForeignKey("IdStatus")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
